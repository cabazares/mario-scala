{"ast":null,"code":"import _classCallCheck from \"/Users/keno/Projects/mario/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/keno/Projects/mario/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar BrickFrames = {\n  DEFAULT: {\n    height: 32,\n    width: 32,\n    offsetX: 544,\n    offsetY: 224,\n    count: 1\n  }\n};\nvar SHEET_GAP = 0;\n\nvar Block =\n/*#__PURE__*/\nfunction () {\n  function Block(swidth, sheight, context, sheet, position, type, hit) {\n    _classCallCheck(this, Block);\n\n    this.imgCache = {};\n    this.swidth = swidth;\n    this.sheight = sheight;\n    this.context = context;\n    this.sheet = sheet;\n    this.position = position;\n    this.type = type;\n    this.frameIndex = 0;\n    this.tickCount = 0;\n    this.ticksPerFrame = 4;\n    this.buffer = document.createElement('canvas');\n    this.bufferctx = this.buffer.getContext('2d'); // TODO: generate all images in cache\n  }\n\n  _createClass(Block, [{\n    key: \"update\",\n    value: function update() {}\n  }, {\n    key: \"getSheetImage\",\n    value: function getSheetImage(sheet, x, y, width, height, direction) {\n      var key = [x, y, width, height, direction].join('_');\n\n      if (!this.imgCache[key]) {\n        this.bufferctx.clearRect(0, 0, this.buffer.width, this.buffer.height);\n        this.bufferctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.bufferctx.drawImage(this.sheet, x, y, width, height, 0, 0, width, height);\n        var image = new Image();\n        image.src = this.buffer.toDataURL();\n        this.imgCache[key] = image;\n      }\n\n      return this.imgCache[key];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var frameInfo = BrickFrames.DEFAULT; // get frame based on index\n\n      var frameX = frameInfo.offsetX + (frameInfo.width + SHEET_GAP) * this.frameIndex;\n      var sheetImage = this.getSheetImage(this.sheet, frameX, frameInfo.offsetY, frameInfo.width, frameInfo.height, this.direction);\n      this.context.drawImage(sheetImage, this.position.x, this.sheight - this.position.y - frameInfo.height);\n    }\n  }]);\n\n  return Block;\n}();\n\nexport default Block;","map":{"version":3,"sources":["/Users/keno/Projects/mario/client/src/Block.js"],"names":["BrickFrames","DEFAULT","height","width","offsetX","offsetY","count","SHEET_GAP","Block","swidth","sheight","context","sheet","position","type","hit","imgCache","frameIndex","tickCount","ticksPerFrame","buffer","document","createElement","bufferctx","getContext","x","y","direction","key","join","clearRect","setTransform","drawImage","image","Image","src","toDataURL","frameInfo","frameX","sheetImage","getSheetImage"],"mappings":"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","sourcesContent":["\nconst BrickFrames = {\n  DEFAULT: {\n    height: 32,\n    width: 32,\n    offsetX: 544,\n    offsetY: 224,\n    count: 1,\n  }\n}\n\nconst SHEET_GAP = 0\n\nclass Block {\n  constructor(swidth, sheight, context, sheet, position, type, hit) {\n    this.swidth = swidth;\n    this.sheight = sheight;\n    this.context = context;\n    this.sheet = sheet;\n\n    this.position = position;\n    this.type = type;\n\n    this.frameIndex = 0;\n    this.tickCount = 0;\n    this.ticksPerFrame = 4;\n\n    this.buffer = document.createElement('canvas');\n    this.bufferctx = this.buffer.getContext('2d');\n\n    // TODO: generate all images in cache\n  }\n\n  update () {\n\n  }\n\n  imgCache = {}\n  getSheetImage(sheet, x, y, width, height, direction) {\n    const key = [x, y, width, height, direction].join('_');\n\n    if (!this.imgCache[key]) {\n      this.bufferctx.clearRect(0, 0, this.buffer.width, this.buffer.height);\n      this.bufferctx.setTransform(1, 0, 0, 1, 0, 0);\n      this.bufferctx.drawImage(this.sheet, x, y, width, height, 0, 0, width, height);\n\n      const image = new Image();\n      image.src = this.buffer.toDataURL();\n      this.imgCache[key] = image;\n    }\n    return this.imgCache[key];\n  }\n\n  draw () {\n    const frameInfo = BrickFrames.DEFAULT;\n    // get frame based on index\n    const frameX = frameInfo.offsetX + ((frameInfo.width + SHEET_GAP) * this.frameIndex);\n\n    const sheetImage = this.getSheetImage(this.sheet, frameX, frameInfo.offsetY,\n                                          frameInfo.width, frameInfo.height,\n                                          this.direction);\n    this.context.drawImage(sheetImage,\n                           this.position.x,\n                           this.sheight - this.position.y - frameInfo.height);\n  }\n}\n\nexport default Block;\n"]},"metadata":{},"sourceType":"module"}
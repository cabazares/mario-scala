{"ast":null,"code":"import _classCallCheck from \"/Users/keno/Projects/mario/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/keno/Projects/mario/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nvar PlayerStates = {\n  STAND: \"stand\",\n  RUN: \"run\",\n  JUMP: \"jump\"\n};\nvar PlayerFrames = {\n  STAND: {\n    height: 32,\n    width: 32,\n    offsetX: 160,\n    offsetY: 68,\n    count: 1\n  },\n  RUN: {\n    height: 32,\n    width: 32,\n    offsetX: 194,\n    offsetY: 68,\n    count: 3\n  },\n  JUMP: {\n    height: 32,\n    width: 32,\n    offsetX: 330,\n    offsetY: 68,\n    count: 1\n  }\n};\nvar PlayerDirection = {\n  LEFT: 'left',\n  RIGHT: 'right'\n};\nvar SHEET_GAP = 2;\n\nvar Player =\n/*#__PURE__*/\nfunction () {\n  function Player(swidth, sheight, context, sheet) {\n    _classCallCheck(this, Player);\n\n    this.imgCache = {};\n    this.swidth = swidth;\n    this.sheight = sheight;\n    this.context = context;\n    this.sheet = sheet;\n    this.position = {\n      x: 0,\n      y: 0\n    };\n    this.state = PlayerStates.RUN;\n    this.direction = PlayerDirection.RIGHT;\n    this.frameIndex = 0;\n    this.tickCount = 0;\n    this.ticksPerFrame = 4;\n    this.buffer = document.createElement('canvas');\n    this.bufferctx = this.buffer.getContext('2d'); // TODO: generate all images in cache\n  }\n\n  _createClass(Player, [{\n    key: \"setPlayerPosition\",\n    value: function setPlayerPosition(x, y) {\n      this.position.x = x;\n      this.position.y = y;\n    }\n  }, {\n    key: \"setPlayerState\",\n    value: function setPlayerState(state) {\n      this.state = state;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var frameInfo = this.getFrameInfo();\n      this.tickCount++;\n\n      if (this.tickCount > this.ticksPerFrame) {\n        this.tickCount = 0;\n        this.frameIndex++;\n        this.frameIndex = this.frameIndex < frameInfo.count ? this.frameIndex : 0;\n      }\n    }\n  }, {\n    key: \"getFrameInfo\",\n    value: function getFrameInfo() {\n      var frame = PlayerFrames.STAND;\n\n      if (this.state === PlayerStates.STAND) {\n        frame = PlayerFrames.STAND;\n      } else if (this.state === PlayerStates.RUN) {\n        frame = PlayerFrames.RUN;\n      } else if (this.state === PlayerStates.JUMP) {\n        frame = PlayerFrames.JUMP;\n      }\n\n      return frame;\n    }\n  }, {\n    key: \"getSheetImage\",\n    value: function getSheetImage(sheet, x, y, width, height, direction) {\n      var key = [x, y, width, height, direction].join('_');\n\n      if (!this.imgCache[key]) {\n        this.bufferctx.clearRect(0, 0, this.buffer.width, this.buffer.height);\n        this.bufferctx.setTransform(1, 0, 0, 1, 0, 0);\n\n        if (direction === PlayerDirection.LEFT) {\n          this.bufferctx.translate(width, 0);\n          this.bufferctx.scale(-1, 1);\n        }\n\n        this.bufferctx.drawImage(this.sheet, x, y, width, height, 0, 0, width, height);\n        var image = new Image();\n        image.src = this.buffer.toDataURL();\n        this.imgCache[key] = image;\n      }\n\n      return this.imgCache[key];\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var frameInfo = this.getFrameInfo(); // get frame based on index\n\n      var frameX = frameInfo.offsetX + (frameInfo.width + SHEET_GAP) * this.frameIndex;\n      var sheetImage = this.getSheetImage(this.sheet, frameX, frameInfo.offsetY, frameInfo.width, frameInfo.height, this.direction);\n      this.context.drawImage(sheetImage, this.position.x, this.sheight - this.position.y - frameInfo.height);\n    }\n  }]);\n\n  return Player;\n}();\n\nexport default Player;","map":{"version":3,"sources":["/Users/keno/Projects/mario/client/src/Player.js"],"names":["PlayerStates","STAND","RUN","JUMP","PlayerFrames","height","width","offsetX","offsetY","count","PlayerDirection","LEFT","RIGHT","SHEET_GAP","Player","swidth","sheight","context","sheet","imgCache","position","x","y","state","direction","frameIndex","tickCount","ticksPerFrame","buffer","document","createElement","bufferctx","getContext","frameInfo","getFrameInfo","frame","key","join","clearRect","setTransform","translate","scale","drawImage","image","Image","src","toDataURL","frameX","sheetImage","getSheetImage"],"mappings":"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","sourcesContent":["\nconst PlayerStates = {\n  STAND: \"stand\",\n  RUN: \"run\",\n  JUMP: \"jump\",\n}\n\nconst PlayerFrames = {\n  STAND: {\n    height: 32,\n    width: 32,\n    offsetX: 160,\n    offsetY: 68,\n    count: 1,\n  },\n  RUN: {\n    height: 32,\n    width: 32,\n    offsetX: 194,\n    offsetY: 68,\n    count: 3,\n  },\n  JUMP: {\n    height: 32,\n    width: 32,\n    offsetX: 330,\n    offsetY: 68,\n    count: 1,\n  },\n}\n\nconst PlayerDirection = {\n  LEFT: 'left',\n  RIGHT: 'right',\n}\n\nconst SHEET_GAP = 2;\n\n\nclass Player {\n  constructor(swidth, sheight, context, sheet) {\n    this.swidth = swidth;\n    this.sheight = sheight;\n    this.context = context;\n    this.sheet = sheet;\n\n    this.position = {\n      x: 0,\n      y: 0,\n    }\n    this.state = PlayerStates.RUN;\n    this.direction = PlayerDirection.RIGHT;\n\n    this.frameIndex = 0;\n    this.tickCount = 0;\n    this.ticksPerFrame = 4;\n\n    this.buffer = document.createElement('canvas');\n    this.bufferctx = this.buffer.getContext('2d');\n\n    // TODO: generate all images in cache\n  }\n\n  setPlayerPosition(x, y) {\n    this.position.x = x;\n    this.position.y = y;\n  }\n\n  setPlayerState(state) {\n    this.state = state;\n  }\n\n  update() {\n    const frameInfo = this.getFrameInfo();\n    this.tickCount++;\n    if (this.tickCount > this.ticksPerFrame) {\n      this.tickCount = 0;\n      this.frameIndex++;\n      this.frameIndex = (this.frameIndex < frameInfo.count)? this.frameIndex : 0; \n    }\n  }\n\n  getFrameInfo() {\n    let frame = PlayerFrames.STAND;\n    if (this.state === PlayerStates.STAND) { \n      frame = PlayerFrames.STAND;\n    } else if (this.state === PlayerStates.RUN) {\n      frame = PlayerFrames.RUN;\n    } else if (this.state === PlayerStates.JUMP) {\n      frame = PlayerFrames.JUMP;\n    }\n    return frame;\n  }\n\n  imgCache = {}\n  getSheetImage(sheet, x, y, width, height, direction) {\n    const key = [x, y, width, height, direction].join('_');\n\n    if (!this.imgCache[key]) {\n      this.bufferctx.clearRect(0, 0, this.buffer.width, this.buffer.height);\n      this.bufferctx.setTransform(1, 0, 0, 1, 0, 0);\n      if (direction === PlayerDirection.LEFT) {\n        this.bufferctx.translate(width, 0);\n        this.bufferctx.scale(-1, 1);\n      }\n      this.bufferctx.drawImage(this.sheet, x, y, width, height, 0, 0, width, height);\n\n      const image = new Image();\n      image.src = this.buffer.toDataURL();\n      this.imgCache[key] = image;\n    }\n    return this.imgCache[key];\n  }\n\n  draw() {\n    const frameInfo = this.getFrameInfo();\n    // get frame based on index\n    const frameX = frameInfo.offsetX + ((frameInfo.width + SHEET_GAP) * this.frameIndex);\n\n    const sheetImage = this.getSheetImage(this.sheet, frameX, frameInfo.offsetY,\n                                          frameInfo.width, frameInfo.height,\n                                          this.direction);\n    this.context.drawImage(sheetImage,\n                           this.position.x,\n                           this.sheight - this.position.y - frameInfo.height);\n  }\n}\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}